package {{.CurrentEntity.AllLower}}

import (
	"context"
	"fmt"
	{{.StorageImport}}

	"github.com/jmoiron/sqlx"
	ae "{{.ProjectPath}}/internal/api_error"
	stor "{{.ProjectPath}}/internal/storage"
	"{{.ProjectPath}}/internal/util"
)

type (
	SQL{{.CurrentEntity.Camel}} struct {
		DB *sqlx.DB
	}
)

func InitSQL() *SQL{{.CurrentEntity.Camel}} {
	db := stor.{{.SQLProvider}}Init()
	return &SQL{{.CurrentEntity.Camel}}{DB: db}
}

func (d *SQL{{.CurrentEntity.Camel}}) Read(ctx context.Context, {{.CurrentEntity.Abbr}} *{{.CurrentEntity.Camel}}) error {
	sqlGet := {{.StorageTablePrefix}}`
		SELECT
			{{.StorageGetColumns}}
		FROM {{.StorageTable}} WHERE {{.StorageTableKeyKeys}}`{{.StorageTablePostfix}}
	if errDB := d.DB.Get({{.CurrentEntity.Abbr}}, sqlGet, {{.StorageTableKeyValues}}); errDB != nil {
		return ae.DBError("{{.CurrentEntity.Camel}} Get: unable to get record.", errDB)
	}
	return nil
}

func (d *SQL{{.CurrentEntity.Camel}}) ReadAll(ctx context.Context, {{.CurrentEntity.Abbr}} *[]{{.CurrentEntity.Camel}}, param {{.CurrentEntity.Camel}}Param) (int, error) {
	searchStmt, args := util.BuildSearchString(param.Param, false) // false => include the where clause, see internal/util/sql.go
	sqlSearch := fmt.Sprintf(`
		SELECT
			{{.StorageGetColumns}}
		FROM {{.StorageTable}}
		%s
		ORDER BY %s %s`, searchStmt, param.Sort, param.PaginationString)
	sqlSearch = d.DB.Rebind(sqlSearch)
	if errDB := d.DB.Select({{.CurrentEntity.Abbr}}, sqlSearch, args...); errDB != nil {
		return 0, ae.DBError("{{.CurrentEntity.Camel}} Search: unable to select records.", errDB)
	}
	sqlCount := fmt.Sprintf(`
		SELECT
			COUNT(*)
		FROM {{.StorageTable}}
		%s`, searchStmt)
	var count int
	sqlCount = d.DB.Rebind(sqlCount)
	if errDB := d.DB.Get(&count, sqlCount, args...); errDB != nil {
		return 0, ae.DBError("{{.StorageTable}} Search: unable to select count.", errDB)
	}
	return count, nil
}

func (d *SQL{{.CurrentEntity.Camel}}) Create(ctx context.Context, {{.CurrentEntity.Abbr}} *{{.CurrentEntity.Camel}}) error { {{.StorageCountCall}}
	sqlPost := {{.StorageTablePrefix}}`
		INSERT INTO {{.StorageTable}} (
			{{.StoragePostColumns}}
		) VALUES (
			{{.StoragePostColumnsNamed}}
		){{.StoragePostReturning}}`{{.StorageTablePostfix}}
	{{.StoragePostQuery}}
	if errDB != nil {
		return ae.DBError("{{.CurrentEntity.Camel}} Post: unable to insert record.", errDB)
	}
	{{.StoragePostLastId}}
	return nil
}

func (d *SQL{{.CurrentEntity.Camel}}) Update(ctx context.Context, {{.CurrentEntity.Abbr}} {{.CurrentEntity.Camel}}) error {
	sqlPatch := {{.StorageTablePrefix}}`
		UPDATE {{.StorageTable}} SET
			{{.StoragePatchColumns}}
		WHERE {{.StoragePatchWhere}}`{{.StorageTablePostfix}}
	if _, errDB := d.DB.NamedExec(sqlPatch, {{.CurrentEntity.Abbr}}); errDB != nil {
		return ae.DBError("{{.CurrentEntity.Camel}} Patch: unable to update record.", errDB)
	}
	return nil
}

func (d *SQL{{.CurrentEntity.Camel}}) Delete(ctx context.Context, {{.CurrentEntity.Abbr}} *{{.CurrentEntity.Camel}}) error {
	sqlDelete := {{.StorageTablePrefix}}`
		DELETE FROM {{.StorageTable}} WHERE {{.StorageTableKeyKeys}}`{{.StorageTablePostfix}}
	if _, errDB := d.DB.Exec(sqlDelete, {{.StorageTableKeyValues}}); errDB != nil {
		return ae.DBError("{{.CurrentEntity.Camel}} Delete: unable to delete record.", errDB)
	}
	return nil
}
{{.StorageCountFunc}}
package {{.ProjectNameAllLower}}

import (
	"net/http"{{.RestStrConv}}

	"github.com/labstack/echo/v4"
	ae "{{.ProjectPath}}/internal/api_error"
	util "{{.ProjectPath}}/internal/util"
)

type (
	Manager{{.ProjectNameCamel}}Adapter interface {
		Get(*{{.ProjectNameCamel}}) error
		Search(*[]{{.ProjectNameCamel}}, {{.ProjectNameCamel}}Param) (int, error)
		Post(*{{.ProjectNameCamel}}) error
		Patch({{.ProjectNameCamel}}) error
		Delete(*{{.ProjectNameCamel}}) error
	}

	Rest{{.ProjectNameCamel}} struct {
		manager{{.ProjectNameCamel}} Manager{{.ProjectNameCamel}}Adapter
	}
)

func InitializeRest(eg *echo.Group) {
	sl := InitStorage()
	ml := NewManager{{.ProjectNameCamel}}(sl)
	hl := NewRest{{.ProjectNameCamel}}(ml)
	hl.Load{{.ProjectNameCamel}}Routes(eg)
}

func NewRest{{.ProjectNameCamel}}(m{{.ProjectNameAbbr}} Manager{{.ProjectNameCamel}}Adapter) *Rest{{.ProjectNameCamel}} {
	return &Rest{{.ProjectNameCamel}}{manager{{.ProjectNameCamel}}: m{{.ProjectNameAbbr}}}
}

func (h *Rest{{.ProjectNameCamel}}) Load{{.ProjectNameCamel}}Routes(eg *echo.Group) {
	eg.GET("/{{.ProjectNameAllLower}}/{{.RestGetDeleteUrl}}", h.Get)
	eg.POST("/{{.ProjectNameAllLower}}/search", h.Search)
	eg.POST("/{{.ProjectNameAllLower}}", h.Post)
	eg.PATCH("/{{.ProjectNameAllLower}}", h.Patch)
	eg.DELETE("/{{.ProjectNameAllLower}}/{{.RestGetDeleteUrl}}", h.Delete)
}

func (h *Rest{{.ProjectNameCamel}}) Get(c echo.Context) error {
{{.RestGetDeleteAssign}}
	{{.ProjectNameLowerCamel}} := &{{.ProjectNameCamel}}{ {{.RestArgSet}} }
	if err := h.manager{{.ProjectNameCamel}}.Get({{.ProjectNameLowerCamel}}); err != nil {
		apiError := err.(ae.ApiError)
		be := apiError.BodyError()
		return c.JSON(be.StatusCode, util.NewOutput(c, nil, &apiError, nil))
	}
	return c.JSON(http.StatusOK, util.NewOutput(c, *{{.ProjectNameLowerCamel}}, nil, nil))
}

func (h *Rest{{.ProjectNameCamel}}) Search(c echo.Context) error {
	param := {{.ProjectNameCamel}}Param{}
	if err := c.Bind(&param); err != nil {
		bindErr := ae.BindError(err)
		return c.JSON(bindErr.StatusCode, util.NewOutput(c, nil, &bindErr, nil))
	}
	{{.ProjectNameLowerCamel}}s := &[]{{.ProjectNameCamel}}{}
	totalCount, err := h.manager{{.ProjectNameCamel}}.Search({{.ProjectNameLowerCamel}}s, param)
	if err != nil {
		apiError := err.(ae.ApiError)
		be := apiError.BodyError()
		return c.JSON(be.StatusCode, util.NewOutput(c, nil, &apiError, nil))
	}
	return c.JSON(http.StatusOK, util.NewOutput(c, *{{.ProjectNameLowerCamel}}s, nil, &totalCount))
}

func (h *Rest{{.ProjectNameCamel}}) Post(c echo.Context) error {
	{{.ProjectNameAbbr}} := {{.ProjectNameCamel}}{}
	{{.ProjectNameAbbr}}Data := {{.ProjectNameCamel}}Data{Data: {{.ProjectNameAbbr}} }
	if err := c.Bind(&{{.ProjectNameAbbr}}Data); err != nil {
		bindErr := ae.BindError(err)
		return c.JSON(bindErr.StatusCode, util.NewOutput(c, bindErr.BodyError(), &bindErr, nil))
	}
	if err := h.manager{{.ProjectNameCamel}}.Post(&{{.ProjectNameAbbr}}Data.Data); err != nil {
		apiError := err.(ae.ApiError)
		be := apiError.BodyError()
		return c.JSON(be.StatusCode, util.NewOutput(c, nil, &apiError, nil))
	}
	return c.JSON(http.StatusOK, util.NewOutput(c, {{.ProjectNameAbbr}}Data.Data, nil, nil))
}

func (h *Rest{{.ProjectNameCamel}}) Patch(c echo.Context) error {
	{{.ProjectNameAbbr}} := {{.ProjectNameCamel}}{}
	{{.ProjectNameAbbr}}Data := {{.ProjectNameCamel}}Data{Data: {{.ProjectNameAbbr}} }
	if err := c.Bind(&{{.ProjectNameAbbr}}Data); err != nil {
		bindErr := ae.BindError(err)
		return c.JSON(bindErr.StatusCode, util.NewOutput(c, bindErr.BodyError(), &bindErr, nil))
	}
	if err := h.manager{{.ProjectNameCamel}}.Patch({{.ProjectNameAbbr}}Data.Data); err != nil {
		apiError := err.(ae.ApiError)
		be := apiError.BodyError()
		return c.JSON(be.StatusCode, util.NewOutput(c, nil, &apiError, nil))
	}
	return c.NoContent(http.StatusOK)
}

func (h *Rest{{.ProjectNameCamel}}) Delete(c echo.Context) error {
{{.RestGetDeleteAssign}}
	{{.ProjectNameLowerCamel}} := &{{.ProjectNameCamel}}{ {{.RestArgSet}} }
	if err := h.manager{{.ProjectNameCamel}}.Delete({{.ProjectNameLowerCamel}}); err != nil {
		apiError := err.(ae.ApiError)
		be := apiError.BodyError()
		return c.JSON(be.StatusCode, util.NewOutput(c, nil, &apiError, nil))
	}
	return c.NoContent(http.StatusOK)
}

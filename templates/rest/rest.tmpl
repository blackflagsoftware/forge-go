package {{.CurrentEntity.AllLower}}

import (
	"net/http"{{.RestStrConv}}

	"github.com/labstack/echo/v4"
	ae "{{.ProjectPath}}/internal/api_error"
	util "{{.ProjectPath}}/internal/util"{{.RestImport}}
)

type (
	Manager{{.CurrentEntity.Camel}}Adapter interface {
		Get(*{{.CurrentEntity.Camel}}) error
		Search(*[]{{.CurrentEntity.Camel}}, {{.CurrentEntity.Camel}}Param) (int, error)
		Post(*{{.CurrentEntity.Camel}}) error
		Patch({{.CurrentEntity.Camel}}) error
		Delete(*{{.CurrentEntity.Camel}}) error
	}

	Rest{{.CurrentEntity.Camel}} struct {
		manager{{.CurrentEntity.Camel}} Manager{{.CurrentEntity.Camel}}Adapter
	}
)

func InitializeRest(eg *echo.Group) {
	sl := InitStorage()
	ml := NewManager{{.CurrentEntity.Camel}}(sl)
	hl := NewRest{{.CurrentEntity.Camel}}(ml)
	hl.Load{{.CurrentEntity.Camel}}Routes(eg)
}

func NewRest{{.CurrentEntity.Camel}}(m{{.CurrentEntity.Abbr}} Manager{{.CurrentEntity.Camel}}Adapter) *Rest{{.CurrentEntity.Camel}} {
	return &Rest{{.CurrentEntity.Camel}}{manager{{.CurrentEntity.Camel}}: m{{.CurrentEntity.Abbr}}}
}

func (h *Rest{{.CurrentEntity.Camel}}) Load{{.CurrentEntity.Camel}}Routes(eg *echo.Group) {
	eg.GET("/{{.CurrentEntity.KebabCase}}/{{.RestGetDeleteUrl}}", h.Get)
	eg.POST("/{{.CurrentEntity.KebabCase}}/search", h.Search)
	eg.POST("/{{.CurrentEntity.KebabCase}}", h.Post)
	eg.PATCH("/{{.CurrentEntity.KebabCase}}", h.Patch)
	eg.DELETE("/{{.CurrentEntity.KebabCase}}/{{.RestGetDeleteUrl}}", h.Delete)
}

func (h *Rest{{.CurrentEntity.Camel}}) Get(c echo.Context) error {
{{.RestGetDeleteAssign}}
	{{.CurrentEntity.LowerCamel}} := &{{.CurrentEntity.Camel}}{ {{.RestArgSet}} }
	if err := h.manager{{.CurrentEntity.Camel}}.Get({{.CurrentEntity.LowerCamel}}); err != nil {
		apiError := err.(ae.ApiError)
		be := apiError.BodyError()
		return c.JSON(be.StatusCode, util.NewOutput(c, nil, &apiError, nil))
	}
	return c.JSON(http.StatusOK, util.NewOutput(c, *{{.CurrentEntity.LowerCamel}}, nil, nil))
}

func (h *Rest{{.CurrentEntity.Camel}}) Search(c echo.Context) error {
	param := {{.CurrentEntity.Camel}}Param{}
	if err := c.Bind(&param); err != nil {
		bindErr := ae.BindError(err)
		return c.JSON(bindErr.StatusCode, util.NewOutput(c, nil, &bindErr, nil))
	}
	{{.CurrentEntity.LowerCamel}}s := &[]{{.CurrentEntity.Camel}}{}
	totalCount, err := h.manager{{.CurrentEntity.Camel}}.Search({{.CurrentEntity.LowerCamel}}s, param)
	if err != nil {
		apiError := err.(ae.ApiError)
		be := apiError.BodyError()
		return c.JSON(be.StatusCode, util.NewOutput(c, nil, &apiError, nil))
	}
	return c.JSON(http.StatusOK, util.NewOutput(c, *{{.CurrentEntity.LowerCamel}}s, nil, &totalCount))
}

func (h *Rest{{.CurrentEntity.Camel}}) Post(c echo.Context) error {
	{{.CurrentEntity.Abbr}} := {{.CurrentEntity.Camel}}{}
	{{.CurrentEntity.Abbr}}Data := {{.CurrentEntity.Camel}}Data{Data: {{.CurrentEntity.Abbr}} }
	if err := c.Bind(&{{.CurrentEntity.Abbr}}Data); err != nil {
		bindErr := ae.BindError(err)
		return c.JSON(bindErr.StatusCode, util.NewOutput(c, bindErr.BodyError(), &bindErr, nil))
	}
	if err := h.manager{{.CurrentEntity.Camel}}.Post(&{{.CurrentEntity.Abbr}}Data.Data); err != nil {
		apiError := err.(ae.ApiError)
		be := apiError.BodyError()
		return c.JSON(be.StatusCode, util.NewOutput(c, nil, &apiError, nil))
	}
	return c.JSON(http.StatusOK, util.NewOutput(c, {{.CurrentEntity.Abbr}}Data.Data, nil, nil))
}

func (h *Rest{{.CurrentEntity.Camel}}) Patch(c echo.Context) error {
	{{.CurrentEntity.Abbr}} := {{.CurrentEntity.Camel}}{}
	{{.CurrentEntity.Abbr}}Data := {{.CurrentEntity.Camel}}Data{Data: {{.CurrentEntity.Abbr}} }
	if err := c.Bind(&{{.CurrentEntity.Abbr}}Data); err != nil {
		bindErr := ae.BindError(err)
		return c.JSON(bindErr.StatusCode, util.NewOutput(c, bindErr.BodyError(), &bindErr, nil))
	}
	if err := h.manager{{.CurrentEntity.Camel}}.Patch({{.CurrentEntity.Abbr}}Data.Data); err != nil {
		apiError := err.(ae.ApiError)
		be := apiError.BodyError()
		return c.JSON(be.StatusCode, util.NewOutput(c, nil, &apiError, nil))
	}
	return c.NoContent(http.StatusOK)
}

func (h *Rest{{.CurrentEntity.Camel}}) Delete(c echo.Context) error {
{{.RestGetDeleteAssign}}
	{{.CurrentEntity.LowerCamel}} := &{{.CurrentEntity.Camel}}{ {{.RestArgSet}} }
	if err := h.manager{{.CurrentEntity.Camel}}.Delete({{.CurrentEntity.LowerCamel}}); err != nil {
		apiError := err.(ae.ApiError)
		be := apiError.BodyError()
		return c.JSON(be.StatusCode, util.NewOutput(c, nil, &apiError, nil))
	}
	return c.NoContent(http.StatusOK)
}

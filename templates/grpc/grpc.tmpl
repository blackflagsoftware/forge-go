package {{.CurrentEntity.AllLower}}

import (
	"context"
	"encoding/json"
	{{.CurrentEntity.GrpcImport}}

	ae "{{.ProjectPath}}/internal/api_error"
	p "{{.ProjectPath}}/pkg/proto"{{.GrpcImport}}
)

type (
	{{.CurrentEntity.Camel}}Grpc struct {
		p.Unimplemented{{.CurrentEntity.Camel}}ServiceServer
		manager{{.CurrentEntity.Camel}} Manager{{.CurrentEntity.Camel}}Adapter
	}
)

func New{{.CurrentEntity.Camel}}Grpc(m{{.CurrentEntity.Abbr}} Manager{{.CurrentEntity.Camel}}Adapter) *{{.CurrentEntity.Camel}}Grpc {
	return &{{.CurrentEntity.Camel}}Grpc{manager{{.CurrentEntity.Camel}}: m{{.CurrentEntity.Abbr}}}
}

func (a *{{.CurrentEntity.Camel}}Grpc) Get{{.CurrentEntity.Camel}}(ctx context.Context, in *p.{{.CurrentEntity.Camel}}IDIn) (*p.{{.CurrentEntity.Camel}}Response, error) {
	result := &p.Result{Success: false}
	response := &p.{{.CurrentEntity.Camel}}Response{Result: result}
	{{.CurrentEntity.Abbr}} := &{{.CurrentEntity.Camel}}{ {{.GrpcArgsInit}} }
	if err := a.manager{{.CurrentEntity.Camel}}.Get(ctx, {{.CurrentEntity.Abbr}}); err != nil {
		response.Result.Error = err.Error()
		return response, err
	}
	var err error
	response.{{.CurrentEntity.Camel}}, err = translateOut({{.CurrentEntity.Abbr}})
	if err != nil {
		return response, err
	}
	response.Result.Success = true
	return response, nil
}

func (a *{{.CurrentEntity.Camel}}Grpc) Search{{.CurrentEntity.Camel}}(ctx context.Context, in *p.{{.CurrentEntity.Camel}}) (*p.{{.CurrentEntity.Camel}}RepeatResponse, error) {
	{{.CurrentEntity.LowerCamel}}Param := {{.CurrentEntity.Camel}}Param{}
	result := &p.Result{Success: false}
	response := &p.{{.CurrentEntity.Camel}}RepeatResponse{Result: result}
	{{.CurrentEntity.Abbr}}s := &[]{{.CurrentEntity.Camel}}{}
	if _, err := a.manager{{.CurrentEntity.Camel}}.Search(ctx, {{.CurrentEntity.Abbr}}s, {{.CurrentEntity.LowerCamel}}Param); err != nil {
		response.Result.Error = err.Error()
		return response, err
	}
	for _, a := range *{{.CurrentEntity.Abbr}}s {
		proto{{.CurrentEntity.Camel}}, err := translateOut(&a)
		if err != nil {
			return response, err
		}
		response.{{.CurrentEntity.Camel}} = append(response.{{.CurrentEntity.Camel}}, proto{{.CurrentEntity.Camel}})
	}
	response.Result.Success = true
	return response, nil
}

func (a *{{.CurrentEntity.Camel}}Grpc) Create{{.CurrentEntity.Camel}}(ctx context.Context, in *p.{{.CurrentEntity.Camel}}) (*p.{{.CurrentEntity.Camel}}Response, error) {
	result := &p.Result{Success: false}
	response := &p.{{.CurrentEntity.Camel}}Response{Result: result}
	{{.CurrentEntity.Abbr}}, err := translateIn(in)
	if err != nil {
		return response, err
	}
	if err := a.manager{{.CurrentEntity.Camel}}.Post(ctx, {{.CurrentEntity.Abbr}}); err != nil {
		response.Result.Error = err.Error()
		return response, err
	}
	var errTranslate error
	response.{{.CurrentEntity.Camel}}, errTranslate = translateOut({{.CurrentEntity.Abbr}})
	if errTranslate != nil {
		return response, errTranslate
	}
	response.Result.Success = true
	return response, nil
}

func (a *{{.CurrentEntity.Camel}}Grpc) Update{{.CurrentEntity.Camel}}(ctx context.Context, in *p.{{.CurrentEntity.Camel}}) (*p.Result, error) {
	response := &p.Result{Success: false}
	{{.CurrentEntity.Abbr}}, err := translateIn(in)
	if err != nil {
		return response, err
	}
	if err := a.manager{{.CurrentEntity.Camel}}.Patch(ctx, *{{.CurrentEntity.Abbr}}); err != nil {
		response.Error = err.Error()
		return response, err
	}
	response.Success = true
	return response, nil
}

func (a *{{.CurrentEntity.Camel}}Grpc) Delete{{.CurrentEntity.Camel}}(ctx context.Context, in *p.{{.CurrentEntity.Camel}}IDIn) (*p.Result, error) {
	response := &p.Result{Success: false}
	{{.CurrentEntity.Abbr}} := &{{.CurrentEntity.Camel}}{ {{.GrpcArgsInit}} }
	if err := a.manager{{.CurrentEntity.Camel}}.Delete(ctx, {{.CurrentEntity.Abbr}}); err != nil {
		response.Error = err.Error()
		return response, err
	}
	response.Success = true
	return response, nil
}

func translateOut({{.CurrentEntity.Abbr}} *{{.CurrentEntity.Camel}}) (*p.{{.CurrentEntity.Camel}}, error) {
	proto{{.CurrentEntity.Camel}} := p.{{.CurrentEntity.Camel}}{}
	{{.GrpcTranslateOut}}
	return &proto{{.CurrentEntity.Camel}}, nil
}

func translateIn(in *p.{{.CurrentEntity.Camel}}) (*{{.CurrentEntity.Camel}}, error) {
	{{.CurrentEntity.Abbr}} := {{.CurrentEntity.Camel}}{}
	{{.GrpcTranslateIn}}
	return &{{.CurrentEntity.Abbr}}, nil
}

// found these are slower; deprecated; keep them, just in case
func translateJsonOut({{.CurrentEntity.Abbr}} *{{.CurrentEntity.Camel}}) (*p.{{.CurrentEntity.Camel}}, error) {
	proto{{.CurrentEntity.Camel}} := p.{{.CurrentEntity.Camel}}{}
	outBytes, err := json.Marshal({{.CurrentEntity.Abbr}})
	if err != nil {
		return &proto{{.CurrentEntity.Camel}}, ae.GeneralError("Unable to encode from {{.CurrentEntity.Camel}}", err)
	}
	err = json.Unmarshal(outBytes, &proto{{.CurrentEntity.Camel}})
	if err != nil {
		return &proto{{.CurrentEntity.Camel}}, ae.GeneralError("Unable to decode to proto.{{.CurrentEntity.Camel}}", err)
	}
	return &proto{{.CurrentEntity.Camel}}, nil
}

func translateJsonIn(in *p.{{.CurrentEntity.Camel}}) (*{{.CurrentEntity.Camel}}, error) {
	{{.CurrentEntity.Abbr}} := {{.CurrentEntity.Camel}}{}
	outBytes, err := json.Marshal(in)
	if err != nil {
		return &{{.CurrentEntity.Abbr}}, ae.GeneralError("Unable to encode from proto.{{.CurrentEntity.Camel}}", err)
	}
	err = json.Unmarshal(outBytes, &{{.CurrentEntity.Abbr}})
	if err != nil {
		return &{{.CurrentEntity.Abbr}}, ae.GeneralError("Unable to decode to {{.CurrentEntity.Camel}}", err)
	}
	return &{{.CurrentEntity.Abbr}}, nil
}

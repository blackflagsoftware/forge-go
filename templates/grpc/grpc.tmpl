package {{.ProjectNameAllLower}}

import (
	"context"
	"encoding/json"
	{{.GrpcImport}}

	ae "{{.ProjectPath}}/internal/api_error"
	p "{{.ProjectPath}}/pkg/proto"
)

type (
	{{.ProjectNameCamel}}Grpc struct {
		p.Unimplemented{{.ProjectNameCamel}}ServiceServer
		manager{{.ProjectNameCamel}} Manager{{.ProjectNameCamel}}Adapter
	}
)

func New{{.ProjectNameCamel}}Grpc(m{{.ProjectNameAbbr}} Manager{{.ProjectNameCamel}}Adapter) *{{.ProjectNameCamel}}Grpc {
	return &{{.ProjectNameCamel}}Grpc{manager{{.ProjectNameCamel}}: m{{.ProjectNameAbbr}}}
}

func (a *{{.ProjectNameCamel}}Grpc) Get{{.ProjectNameCamel}}(ctx context.Context, in *p.{{.ProjectNameCamel}}IDIn) (*p.{{.ProjectNameCamel}}Response, error) {
	result := &p.Result{Success: false}
	response := &p.{{.ProjectNameCamel}}Response{Result: result}
	{{.ProjectNameAbbr}} := &{{.ProjectNameCamel}}{ {{.GrpcArgsInit}} }
	if err := a.manager{{.ProjectNameCamel}}.Get({{.ProjectNameAbbr}}); err != nil {
		response.Result.Error = err.Error()
		return response, err
	}
	var err error
	response.{{.ProjectNameCamel}}, err = translateOut({{.ProjectNameAbbr}})
	if err != nil {
		return response, err
	}
	response.Result.Success = true
	return response, nil
}

func (a *{{.ProjectNameCamel}}Grpc) Search{{.ProjectNameCamel}}(ctx context.Context, in *p.{{.ProjectNameCamel}}) (*p.{{.ProjectNameCamel}}RepeatResponse, error) {
	{{.ProjectNameLowerCamel}}Param := {{.ProjectNameCamel}}Param{}
	result := &p.Result{Success: false}
	response := &p.{{.ProjectNameCamel}}RepeatResponse{Result: result}
	{{.ProjectNameAbbr}}s := &[]{{.ProjectNameCamel}}{}
	if _, err := a.manager{{.ProjectNameCamel}}.Search({{.ProjectNameAbbr}}s, {{.ProjectNameLowerCamel}}Param); err != nil {
		response.Result.Error = err.Error()
		return response, err
	}
	for _, a := range *{{.ProjectNameAbbr}}s {
		proto{{.ProjectNameCamel}}, err := translateOut(&a)
		if err != nil {
			return response, err
		}
		response.{{.ProjectNameCamel}} = append(response.{{.ProjectNameCamel}}, proto{{.ProjectNameCamel}})
	}
	response.Result.Success = true
	return response, nil
}

func (a *{{.ProjectNameCamel}}Grpc) Create{{.ProjectNameCamel}}(ctx context.Context, in *p.{{.ProjectNameCamel}}) (*p.{{.ProjectNameCamel}}Response, error) {
	result := &p.Result{Success: false}
	response := &p.{{.ProjectNameCamel}}Response{Result: result}
	{{.ProjectNameAbbr}}, err := translateIn(in)
	if err != nil {
		return response, err
	}
	if err := a.manager{{.ProjectNameCamel}}.Post({{.ProjectNameAbbr}}); err != nil {
		response.Result.Error = err.Error()
		return response, err
	}
	var errTranslate error
	response.{{.ProjectNameCamel}}, errTranslate = translateOut({{.ProjectNameAbbr}})
	if err != nil {
		return response, errTranslate
	}
	response.Result.Success = true
	return response, nil
}

func (a *{{.ProjectNameCamel}}Grpc) Update{{.ProjectNameCamel}}(ctx context.Context, in *p.{{.ProjectNameCamel}}) (*p.Result, error) {
	response := &p.Result{Success: false}
	{{.ProjectNameAbbr}}, err := translateIn(in)
	if err != nil {
		return response, err
	}
	if err := a.manager{{.ProjectNameCamel}}.Patch(*{{.ProjectNameAbbr}}); err != nil {
		response.Error = err.Error()
		return response, err
	}
	response.Success = true
	return response, nil
}

func (a *{{.ProjectNameCamel}}Grpc) Delete{{.ProjectNameCamel}}(ctx context.Context, in *p.{{.ProjectNameCamel}}IDIn) (*p.Result, error) {
	response := &p.Result{Success: false}
	{{.ProjectNameAbbr}} := &{{.ProjectNameCamel}}{ {{.GrpcArgsInit}} }
	if err := a.manager{{.ProjectNameCamel}}.Delete({{.ProjectNameAbbr}}); err != nil {
		response.Error = err.Error()
		return response, err
	}
	response.Success = true
	return response, nil
}

func translateOut({{.ProjectNameAbbr}} *{{.ProjectNameCamel}}) (*p.{{.ProjectNameCamel}}, error) {
	proto{{.ProjectNameCamel}} := p.{{.ProjectNameCamel}}{}
	{{.GrpcTranslateOut}}
	return &proto{{.ProjectNameCamel}}, nil
}

func translateIn(in *p.{{.ProjectNameCamel}}) (*{{.ProjectNameCamel}}, error) {
	{{.ProjectNameAbbr}} := {{.ProjectNameCamel}}{}
	{{.GrpcTranslateIn}}
	return &{{.ProjectNameAbbr}}, nil
}

// found these are slower; deprecated; keep them, just in case
func translateJsonOut({{.ProjectNameAbbr}} *{{.ProjectNameCamel}}) (*p.{{.ProjectNameCamel}}, error) {
	proto{{.ProjectNameCamel}} := p.{{.ProjectNameCamel}}{}
	outBytes, err := json.Marshal({{.ProjectNameAbbr}})
	if err != nil {
		return &proto{{.ProjectNameCamel}}, ae.GeneralError("Unable to encode from {{.ProjectNameCamel}}", err)
	}
	err = json.Unmarshal(outBytes, &proto{{.ProjectNameCamel}})
	if err != nil {
		return &proto{{.ProjectNameCamel}}, ae.GeneralError("Unable to decode to proto.{{.ProjectNameCamel}}", err)
	}
	return &proto{{.ProjectNameCamel}}, nil
}

func translateJsonIn(in *p.{{.ProjectNameCamel}}) (*{{.ProjectNameCamel}}, error) {
	{{.ProjectNameAbbr}} := {{.ProjectNameCamel}}{}
	outBytes, err := json.Marshal(in)
	if err != nil {
		return &{{.ProjectNameAbbr}}, ae.GeneralError("Unable to encode from proto.{{.ProjectNameCamel}}", err)
	}
	err = json.Unmarshal(outBytes, &{{.ProjectNameAbbr}})
	if err != nil {
		return &{{.ProjectNameAbbr}}, ae.GeneralError("Unable to decode to {{.ProjectNameCamel}}", err)
	}
	return &{{.ProjectNameAbbr}}, nil
}

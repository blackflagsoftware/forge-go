package {{.ProjectNameAllLower}}

import (
	"encoding/json"

	ae "{{.ProjectPath}}/internal/api_error"
	p "{{.ProjectPath}}/pkg/proto"
)

type (
	{{.ProjectNameCamel}}Grpc struct {
		p.Unimplemented{{.ProjectNameCamel}}ServiceServer
		manager{{.ProjectNameCamel}} Manager{{.ProjectNameCamel}}Adapter
	}
)

func New{{.ProjectNameCamel}}Grpc(m{{.ProjectNameAbbr}} Manager{{.ProjectNameCamel}}Adapter) *{{.ProjectNameCamel}}Grpc {
	return &{{.ProjectNameCamel}}Grpc{manager{{.ProjectNameCamel}}: m{{.ProjectNameAbbr}}}
}

func translateOut({{.ProjectNameAbbr}} *{{.ProjectNameCamel}}) (*p.{{.ProjectNameCamel}}, error) {
	proto{{.ProjectNameCamel}} := p.{{.ProjectNameCamel}}{}
	return &proto{{.ProjectNameCamel}}, nil
}

func translateIn(in *p.{{.ProjectNameCamel}}) (*{{.ProjectNameCamel}}, error) {
	{{.ProjectNameAbbr}} := {{.ProjectNameCamel}}{}
	return &{{.ProjectNameAbbr}}, nil
}

// found these are slower; deprecated; keep them, just in case
func translateJsonOut({{.ProjectNameAbbr}} *{{.ProjectNameCamel}}) (*p.{{.ProjectNameCamel}}, error) {
	proto{{.ProjectNameCamel}} := p.{{.ProjectNameCamel}}{}
	outBytes, err := json.Marshal({{.ProjectNameAbbr}})
	if err != nil {
		return &proto{{.ProjectNameCamel}}, ae.GeneralError("Unable to encode from {{.ProjectNameCamel}}", err)
	}
	err = json.Unmarshal(outBytes, &proto{{.ProjectNameCamel}})
	if err != nil {
		return &proto{{.ProjectNameCamel}}, ae.GeneralError("Unable to decode to proto.{{.ProjectNameCamel}}", err)
	}
	return &proto{{.ProjectNameCamel}}, nil
}

func translateJsonIn(in *p.{{.ProjectNameCamel}}) (*{{.ProjectNameCamel}}, error) {
	{{.ProjectNameAbbr}} := {{.ProjectNameCamel}}{}
	outBytes, err := json.Marshal(in)
	if err != nil {
		return &{{.ProjectNameAbbr}}, ae.GeneralError("Unable to encode from proto.{{.ProjectNameCamel}}", err)
	}
	err = json.Unmarshal(outBytes, &{{.ProjectNameAbbr}})
	if err != nil {
		return &{{.ProjectNameAbbr}}, ae.GeneralError("Unable to decode to {{.ProjectNameCamel}}", err)
	}
	return &{{.ProjectNameAbbr}}, nil
}

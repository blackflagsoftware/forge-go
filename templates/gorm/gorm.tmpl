package {{.ProjectNameAllLower}}

import (
	"gorm.io/gorm"
	ae "{{.ProjectPath}}/internal/api_error"
	stor "{{.ProjectPath}}/internal/storage"
)

type (
	SQL{{.ProjectNameCamel}} struct {
		DB *gorm.DB
	}
)

func InitSQL() *SQL{{.ProjectNameCamel}} {
	db := stor.GormInit()
	return &SQL{{.ProjectNameCamel}}{DB: db}
}

func (d *SQL{{.ProjectNameCamel}}) Get({{.ProjectNameAbbr}} *{{.ProjectNameCamel}}) error {
	result := d.DB.Where({{.ProjectNameAbbr}}).First({{.ProjectNameAbbr}})
	if result.Error != nil {
		return ae.DBError("{{.ProjectNameCamel}} Get: unable to select record.", result.Error)
	}
	return nil
}

func (d *SQL{{.ProjectNameCamel}}) Search({{.ProjectNameAbbr}} *[]{{.ProjectNameCamel}}) error {
	result := d.DB.Find({{.ProjectNameAbbr}})
	if result.Error != nil {
		return ae.DBError("{{.ProjectNameCamel}} Search: unable to select records.", result.Error)
	}
	return nil
}

func (d *SQL{{.ProjectNameCamel}}) Post({{.ProjectNameAbbr}} *{{.ProjectNameCamel}}) error {
	result := d.DB.Create({{.ProjectNameAbbr}})
	if result.Error != nil {
		return ae.DBError("{{.ProjectNameCamel}} Post: unable to insert record.", result.Error)
	}
	return nil
}

func (d *SQL{{.ProjectNameCamel}}) Patch({{.ProjectNameAbbr}} {{.ProjectNameCamel}}) error {
	result := d.DB.Save({{.ProjectNameAbbr}})
	if result.Error != nil {
		return ae.DBError("{{.ProjectNameCamel}} Patch: unable to update record.", result.Error)
	}
	return nil
}

func (d *SQL{{.ProjectNameCamel}}) Delete({{.ProjectNameAbbr}} *{{.ProjectNameCamel}}) error {
	result := d.DB.Delete({{.ProjectNameAbbr}})
	if result.Error != nil {
		return ae.DBError("{{.ProjectNameCamel}} Delete: unable to delete record.", result.Error)
	}
	return nil
}

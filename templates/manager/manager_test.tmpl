package {{.ProjectNameAllLower}}

import (
	{{.ManagerTestImport}}
)

func TestManager{{.ProjectNameCamel}}_Get(t *testing.T) {
	ctrl := gomock.NewController(t)
	mockData{{.ProjectNameCamel}} := NewMockData{{.ProjectNameCamel}}Adapter(ctrl)

	tests := []struct {
		name    string
		{{.ProjectNameAbbr}} *{{.ProjectNameCamel}}
		wantErr bool
		calls   []*gomock.Call
	}{
		{{.ManagerTestGetRow}}
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &Manager{{.ProjectNameCamel}}{data{{.ProjectNameCamel}}: mockData{{.ProjectNameCamel}}}
			err := m.Get(tt.{{.ProjectNameAbbr}})
			if !tt.wantErr {
				assert.Nil(t, err, "Manager{{.ProjectNameCamel}}.Get().%s => expected not error; got: %s", tt.name, err)
			}
			if tt.wantErr {
				assert.NotNil(t, err, "Manager{{.ProjectNameCamel}}.Get().%s => expected error: got nil", tt.name)
			}
		})
	}
}

func TestManager{{.ProjectNameCamel}}_Post(t *testing.T) {
	ctrl := gomock.NewController(t)
	mockData{{.ProjectNameCamel}} := NewMockData{{.ProjectNameCamel}}Adapter(ctrl)

	tests := []struct {
		name    string
		{{.ProjectNameAbbr}}     *{{.ProjectNameCamel}}
		wantErr bool
		calls   []*gomock.Call
	}{
		{{.ManagerTestPostRow}}
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &Manager{{.ProjectNameCamel}}{data{{.ProjectNameCamel}}: mockData{{.ProjectNameCamel}}}
			err := m.Post(tt.{{.ProjectNameAbbr}})
			if !tt.wantErr {
				assert.Nil(t, err, "Manager{{.ProjectNameCamel}}.Create().%s => expected not error; got: %s", tt.name, err)
			}
			if tt.wantErr {
				assert.NotNil(t, err, "Manager{{.ProjectNameCamel}}.Create().%s => expected error: got nil", tt.name)
			}
		})
	}
}

func TestManager{{.ProjectNameCamel}}_Patch(t *testing.T) {
	ctrl := gomock.NewController(t)
	mockData{{.ProjectNameCamel}} := NewMockData{{.ProjectNameCamel}}Adapter(ctrl)

	tests := []struct {
		name    string
		body   	{{.ProjectNameCamel}}
		wantErr bool
		calls   []*gomock.Call
	}{
		{
			"successful",
			{{.ProjectNameCamel}}{ {{.ManagerTestPatchInit}} },
			false,
			[]*gomock.Call{
				mockData{{.ProjectNameCamel}}.EXPECT().Read(gomock.Any()).Return(nil),
				mockData{{.ProjectNameCamel}}.EXPECT().Update(gomock.Any()).Return(nil),
			},
		},
		{
			"invalid id",
			{{.ProjectNameCamel}}{ {{.ManagerTestPatchInit}} },
			true,
			[]*gomock.Call{
				mockData{{.ProjectNameCamel}}.EXPECT().Read(gomock.Any()).Return(fmt.Errorf("missing record")),
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &Manager{{.ProjectNameCamel}}{data{{.ProjectNameCamel}}: mockData{{.ProjectNameCamel}}}
			err := m.Patch(tt.body)
			if !tt.wantErr {
				assert.Nil(t, err, "Manager{{.ProjectNameCamel}}.Update().%s => expected not error; got: %s", tt.name, err)
			}
			if tt.wantErr {
				assert.NotNil(t, err, "Manager{{.ProjectNameCamel}}.Update().%s => expected error: got nil", tt.name)
			}
		})
	}
}

func TestManager{{.ProjectNameCamel}}_Delete(t *testing.T) {
	ctrl := gomock.NewController(t)
	mockData{{.ProjectNameCamel}} := NewMockData{{.ProjectNameCamel}}Adapter(ctrl)

	tests := []struct {
		name    string
		{{.ProjectNameAbbr}}     *{{.ProjectNameCamel}}
		wantErr bool
		calls   []*gomock.Call
	}{
		{{.ManagerTestDeleteRow}}
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &Manager{{.ProjectNameCamel}}{data{{.ProjectNameCamel}}: mockData{{.ProjectNameCamel}}}
			err := m.Delete(tt.{{.ProjectNameAbbr}})
			if !tt.wantErr {
				assert.Nil(t, err, "Manager{{.ProjectNameCamel}}.Delete().%s => expected not error; got: %s", tt.name, err)
			}
			if tt.wantErr {
				assert.NotNil(t, err, "Manager{{.ProjectNameCamel}}.Delete().%s => expected error: got nil", tt.name)
			}
		})
	}
}

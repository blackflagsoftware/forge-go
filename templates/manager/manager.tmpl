package {{.ProjectNameAllLower}}

import (
	{{.ManagerImport}}
)

//go:generate mockgen -source=manager.go -destination=mock.go -package={{.ProjectNameAllLower}}
type (
	Data{{.ProjectNameCamel}}Adapter interface {
		Read(*{{.ProjectNameCamel}}) error
		ReadAll(*[]{{.ProjectNameCamel}}, {{.ProjectNameCamel}}Param) (int, error)
		Create(*{{.ProjectNameCamel}}) error
		Update({{.ProjectNameCamel}}) error
		Delete(*{{.ProjectNameCamel}}) error
	}

	Manager{{.ProjectNameCamel}} struct {
		data{{.ProjectNameCamel}} Data{{.ProjectNameCamel}}Adapter
		auditWriter a.AuditAdapter
	}
)

func NewManager{{.ProjectNameCamel}}(c{{.ProjectNameAbbr}} Data{{.ProjectNameCamel}}Adapter) *Manager{{.ProjectNameCamel}} {
	aw := a.AuditInit()
	return &Manager{{.ProjectNameCamel}}{data{{.ProjectNameCamel}}: c{{.ProjectNameAbbr}}, auditWriter: aw}
}

func (m *Manager{{.ProjectNameCamel}}) Get({{.ProjectNameAbbr}} *{{.ProjectNameCamel}}) error {
	{{.ManagerGetRows}}
	return m.data{{.ProjectNameCamel}}.Read({{.ProjectNameAbbr}})
}

func (m *Manager{{.ProjectNameCamel}}) Search({{.ProjectNameAbbr}} *[]{{.ProjectNameCamel}}, param {{.ProjectNameCamel}}Param) (int, error) {
	param.Param.CalculateParam("{{.CurrentEntity.DefaultColumn}}", map[string]string{ {{.CurrentEntity.SortColumns}} })

	return m.data{{.ProjectNameCamel}}.ReadAll({{.ProjectNameAbbr}}, param)
}

func (m *Manager{{.ProjectNameCamel}}) Post({{.ProjectNameAbbr}} *{{.ProjectNameCamel}}) error {
	{{.ManagerPostRows}}
	if err := m.data{{.ProjectNameCamel}}.Create({{.ProjectNameAbbr}}); err != nil {
		return nil
	}
	go a.AuditCreate(m.auditWriter, *{{.ProjectNameAbbr}}, {{.ProjectNameCamel}}Const, a.KeysToString({{.ManagerAuditKey}}))
	return nil
}

func (m *Manager{{.ProjectNameCamel}}) Patch({{.ProjectNameAbbr}}In {{.ProjectNameCamel}}) error {
	{{.ProjectNameAbbr}} := &{{.ProjectNameCamel}}{ {{.ManagerPatchInitArgs}} }
	errGet := m.data{{.ProjectNameCamel}}.Read({{.ProjectNameAbbr}})
	if errGet != nil {
		return errGet
	}
	existingValues := make(map[string]interface{})
	{{.ManagerPatchRows}}
	if err := m.data{{.ProjectNameCamel}}.Update(*{{.ProjectNameAbbr}}); err != nil {
		return err
	}
	go a.AuditPatch(m.auditWriter, *{{.ProjectNameAbbr}}, {{.ProjectNameCamel}}Const, a.KeysToString({{.ManagerAuditKey}}), existingValues)
	return nil
}

func (m *Manager{{.ProjectNameCamel}}) Delete({{.ProjectNameAbbr}} *{{.ProjectNameCamel}}) error {
	{{.ManagerGetRows}}
	if err := m.data{{.ProjectNameCamel}}.Delete({{.ProjectNameAbbr}}); err != nil {
		return err
	}
	go a.AuditDelete(m.auditWriter, *{{.ProjectNameAbbr}}, {{.ProjectNameCamel}}Const, a.KeysToString({{.ManagerAuditKey}}))
	return nil
}

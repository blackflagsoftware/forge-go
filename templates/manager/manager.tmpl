package {{.CurrentEntity.AllLower}}

import (
	{{.ManagerImport}}
	stor "{{.ProjectPath}}/internal/storage"
)

//go:generate mockgen -source=manager.go -destination=mock.go -package={{.CurrentEntity.AllLower}}
type (
	Data{{.CurrentEntity.Camel}}Adapter interface {
		Read(*{{.CurrentEntity.Camel}}) error
		ReadAll(*[]{{.CurrentEntity.Camel}}, {{.CurrentEntity.Camel}}Param) (int, error)
		Create(*{{.CurrentEntity.Camel}}) error
		Update({{.CurrentEntity.Camel}}) error
		Delete(*{{.CurrentEntity.Camel}}) error
	}

	Manager{{.CurrentEntity.Camel}} struct {
		data{{.CurrentEntity.Camel}} Data{{.CurrentEntity.Camel}}Adapter
		auditWriter a.AuditAdapter
	}
)

func NewManager{{.CurrentEntity.Camel}}(c{{.CurrentEntity.Abbr}} Data{{.CurrentEntity.Camel}}Adapter) *Manager{{.CurrentEntity.Camel}} {
	aw := a.AuditInit()
	return &Manager{{.CurrentEntity.Camel}}{data{{.CurrentEntity.Camel}}: c{{.CurrentEntity.Abbr}}, auditWriter: aw}
}

func (m *Manager{{.CurrentEntity.Camel}}) Get({{.CurrentEntity.Abbr}} *{{.CurrentEntity.Camel}}) error {
	{{.ManagerGetRows}}
	return m.data{{.CurrentEntity.Camel}}.Read({{.CurrentEntity.Abbr}})
}

func (m *Manager{{.CurrentEntity.Camel}}) Search({{.CurrentEntity.Abbr}} *[]{{.CurrentEntity.Camel}}, param {{.CurrentEntity.Camel}}Param) (int, error) {
	// the second argument (map[string]string) is a list of columns to use for filtering, the key is the actual column name (if aliases are used in your query) the value should match your json struct tag, this can obfuscate your true column names
	param.Param.CalculateParam("{{.CurrentEntity.DefaultColumn}}", map[string]string{ {{.CurrentEntity.SortColumns}} })
	param.Param.PaginationString = stor.FormatPagination(param.Param.Limit, param.Param.Offset)

	return m.data{{.CurrentEntity.Camel}}.ReadAll({{.CurrentEntity.Abbr}}, param)
}

func (m *Manager{{.CurrentEntity.Camel}}) Post({{.CurrentEntity.Abbr}} *{{.CurrentEntity.Camel}}) error {
	{{.ManagerPostRows}}
	if err := m.data{{.CurrentEntity.Camel}}.Create({{.CurrentEntity.Abbr}}); err != nil {
		return err
	}
	go a.AuditCreate(m.auditWriter, *{{.CurrentEntity.Abbr}}, {{.CurrentEntity.Camel}}Const, a.KeysToString({{.ManagerAuditKey}}))
	return nil
}

func (m *Manager{{.CurrentEntity.Camel}}) Patch({{.CurrentEntity.Abbr}}In {{.CurrentEntity.Camel}}) error {
	{{.CurrentEntity.Abbr}} := &{{.CurrentEntity.Camel}}{ {{.ManagerPatchInitArgs}} }
	errGet := m.data{{.CurrentEntity.Camel}}.Read({{.CurrentEntity.Abbr}})
	if errGet != nil {
		return errGet
	}
	existingValues := make(map[string]interface{})
	{{.ManagerPatchRows}}
	if err := m.data{{.CurrentEntity.Camel}}.Update(*{{.CurrentEntity.Abbr}}); err != nil {
		return err
	}
	go a.AuditPatch(m.auditWriter, *{{.CurrentEntity.Abbr}}, {{.CurrentEntity.Camel}}Const, a.KeysToString({{.ManagerAuditKey}}), existingValues)
	return nil
}

func (m *Manager{{.CurrentEntity.Camel}}) Delete({{.CurrentEntity.Abbr}} *{{.CurrentEntity.Camel}}) error {
	{{.ManagerGetRows}}
	if err := m.data{{.CurrentEntity.Camel}}.Delete({{.CurrentEntity.Abbr}}); err != nil {
		return err
	}
	go a.AuditDelete(m.auditWriter, *{{.CurrentEntity.Abbr}}, {{.CurrentEntity.Camel}}Const, a.KeysToString({{.ManagerAuditKey}}))
	return nil
}

package {{.AllLower}}

import (
	{{.ManagerImport}}
)

//go:generate mockgen -source=manager.go -destination=mock.go -package={{.AllLower}}
type (
	Data{{.Camel}}Adapter interface {
		Read(*{{.Camel}}) error
		ReadAll(*[]{{.Camel}}, {{.Camel}}Param) (int, error)
		Create(*{{.Camel}}) error
		Update({{.Camel}}) error
		Delete(*{{.Camel}}) error
	}

	Manager{{.Camel}} struct {
		data{{.Camel}} Data{{.Camel}}Adapter
		auditWriter a.AuditAdapter
	}
)

func NewManager{{.Camel}}(c{{.Abbr}} Data{{.Camel}}Adapter) *Manager{{.Camel}} {
	aw := a.AuditInit()
	return &Manager{{.Camel}}{data{{.Camel}}: c{{.Abbr}}, auditWriter: aw}
}

func (m *Manager{{.Camel}}) Get({{.Abbr}} *{{.Camel}}) error {
	{{.ManagerGetRows}}
	return m.data{{.Camel}}.Read({{.Abbr}})
}

func (m *Manager{{.Camel}}) Search({{.Abbr}} *[]{{.Camel}}, param {{.Camel}}Param) (int, error) {
	param.Param.CalculateParam("{{.DefaultColumn}}", map[string]string{ {{.SortColumns}} })

	return m.data{{.Camel}}.ReadAll({{.Abbr}}, param)
}

func (m *Manager{{.Camel}}) Post({{.Abbr}} *{{.Camel}}) error {
	{{.ManagerPostRows}}
	if err := m.data{{.Camel}}.Create({{.Abbr}}); err != nil {
		return nil
	}
	go a.AuditCreate(m.auditWriter, *{{.Abbr}}, {{.Camel}}Const, a.KeysToString({{.ManagerAuditKey}}))
	return nil
}

func (m *Manager{{.Camel}}) Patch({{.Abbr}}In {{.Camel}}) error {
	{{.Abbr}} := &{{.Camel}}{ {{.ManagerPatchInitArgs}} }
	errGet := m.data{{.Camel}}.Read({{.Abbr}})
	if errGet != nil {
		return errGet
	}
	existingValues := make(map[string]interface{})
	{{.ManagerPatchRows}}
	if err := m.data{{.Camel}}.Update(*{{.Abbr}}); err != nil {
		return err
	}
	go a.AuditPatch(m.auditWriter, *{{.Abbr}}, {{.Camel}}Const, a.KeysToString({{.ManagerAuditKey}}), existingValues)
	return nil
}

func (m *Manager{{.Camel}}) Delete({{.Abbr}} *{{.Camel}}) error {
	{{.ManagerGetRows}}
	if err := m.data{{.Camel}}.Delete({{.Abbr}}); err != nil {
		return err
	}
	go a.AuditDelete(m.auditWriter, *{{.Abbr}}, {{.Camel}}Const, a.KeysToString({{.ManagerAuditKey}}))
	return nil
}

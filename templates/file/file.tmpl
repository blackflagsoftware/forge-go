package {{.CurrentEntity.AllLower}}

import (
	"{{.ProjectPath}}/internal/storage"
)

type (
	File{{.CurrentEntity.Camel}} struct {}
)

func (d *File{{.CurrentEntity.Camel}}) Read({{.CurrentEntity.Abbr}} *{{.CurrentEntity.Camel}}) error {
	{{.CurrentEntity.Abbr}}s := []{{.CurrentEntity.Camel}}{}
	if err := storage.OpenFile({{.CurrentEntity.Camel}}Const, &{{.CurrentEntity.Abbr}}s); err != nil {
		return err
	}
	for _, {{.CurrentEntity.Abbr}}Obj := range {{.CurrentEntity.Abbr}}s {
		if {{.FileKeys}} {
			{{.FileGetColumns}}
			break
		}
	}
	return nil
}

func (d *File{{.CurrentEntity.Camel}}) ReadAll({{.CurrentEntity.Abbr}} *[]{{.CurrentEntity.Camel}}, param {{.CurrentEntity.Camel}}Param) (int, error) {
	err := storage.OpenFile({{.CurrentEntity.Camel}}Const, {{.CurrentEntity.Abbr}})
	return len(*{{.CurrentEntity.Abbr}}), err
}

func (d *File{{.CurrentEntity.Camel}}) Create({{.CurrentEntity.Abbr}} *{{.CurrentEntity.Camel}}) error {
	{{.CurrentEntity.Abbr}}s := []{{.CurrentEntity.Camel}}{}
	if err := storage.OpenFile({{.CurrentEntity.Camel}}Const, &{{.CurrentEntity.Abbr}}s); err != nil {
		return err
	}
	{{.FilePostIncr}}
	{{.CurrentEntity.Abbr}}s = append({{.CurrentEntity.Abbr}}s, *{{.CurrentEntity.Abbr}})
	return storage.SaveFile({{.CurrentEntity.Camel}}Const, {{.CurrentEntity.Abbr}}s)
}

func (d *File{{.CurrentEntity.Camel}}) Update({{.CurrentEntity.Abbr}} {{.CurrentEntity.Camel}}) error {
	{{.CurrentEntity.Abbr}}s := []{{.CurrentEntity.Camel}}{}
	if err := storage.OpenFile({{.CurrentEntity.Camel}}Const, &{{.CurrentEntity.Abbr}}s); err != nil {
		return err
	}
	for i, {{.CurrentEntity.Abbr}}Obj := range {{.CurrentEntity.Abbr}}s {
		if {{.FileKeys}} {
			{{.CurrentEntity.Abbr}}s[i] = {{.CurrentEntity.Abbr}}
			break
		}
	}
	return storage.SaveFile({{.CurrentEntity.Camel}}Const, {{.CurrentEntity.Abbr}}s)
}

func (d *File{{.CurrentEntity.Camel}}) Delete({{.CurrentEntity.Abbr}} *{{.CurrentEntity.Camel}}) error {
	{{.CurrentEntity.Abbr}}s := []{{.CurrentEntity.Camel}}{}
	if err := storage.OpenFile({{.CurrentEntity.Camel}}Const, &{{.CurrentEntity.Abbr}}s); err != nil {
		return err
	}
	for i, {{.CurrentEntity.Abbr}}Obj := range {{.CurrentEntity.Abbr}}s {
		if {{.FileKeys}} {
			{{.CurrentEntity.Abbr}}s = append({{.CurrentEntity.Abbr}}s[:i], {{.CurrentEntity.Abbr}}s[i+1:]...)
			break
		}
	}
	return storage.SaveFile({{.CurrentEntity.Camel}}Const, {{.CurrentEntity.Abbr}}s) 
}

package {{.ProjectNameAllLower}}

import (
	"{{.ProjectPath}}/config"
	"{{.ProjectPath}}/internal/storage"
)

type (
	File{{.ProjectNameCamel}} struct {}
)

func (d *File{{.ProjectNameCamel}}) Get({{.ProjectNameAbbr}} *{{.ProjectNameCamel}}) error {
	{{.ProjectNameAbbr}}s := []{{.ProjectNameCamel}}{}
	if err := storage.OpenFile(config.StorageFileDir, &{{.ProjectNameAbbr}}s); err != nil {
		return err
	}
	for _, {{.ProjectNameAbbr}}Obj := range {{.ProjectNameAbbr}}s {
		if {{.FileKeys}} {
			{{.FileGetColumns}}
			break
		}
	}
	return nil
}

func (d *File{{.ProjectNameCamel}}) Select({{.ProjectNameAbbr}} *[]{{.ProjectNameCamel}}) error {
	return storage.OpenFile(config.StorageFileDir, {{.ProjectNameAbbr}})
}

func (d *File{{.ProjectNameCamel}}) Post({{.ProjectNameAbbr}} *{{.ProjectNameCamel}}) error {
	{{.ProjectNameAbbr}}s := []{{.ProjectNameCamel}}{}
	if err := storage.OpenFile(config.StorageFileDir, &{{.ProjectNameAbbr}}s); err != nil {
		return err
	}
	{{.FilePostIncr}}
	{{.ProjectNameAbbr}}s = append({{.ProjectNameAbbr}}s, *{{.ProjectNameAbbr}})
	return storage.SaveFile(config.StorageFileDir, {{.ProjectNameAbbr}}s)
}

func (d *File{{.ProjectNameCamel}}) Patch({{.ProjectNameAbbr}} {{.ProjectNameCamel}}) error {
	{{.ProjectNameAbbr}}s := []{{.ProjectNameCamel}}{}
	if err := storage.OpenFile(config.StorageFileDir, &{{.ProjectNameAbbr}}s); err != nil {
		return err
	}
	for i, {{.ProjectNameAbbr}}Obj := range {{.ProjectNameAbbr}}s {
		if {{.FileKeys}} {
			{{.ProjectNameAbbr}}s[i] = *{{.ProjectNameAbbr}}
			break
		}
	}
	return storage.SaveFile(config.StorageFileDir, {{.ProjectNameAbbr}}s)
}

func (d *File{{.ProjectNameCamel}}) Delete({{.ProjectNameAbbr}} *{{.ProjectNameCamel}}) error {
	{{.ProjectNameAbbr}}s := []{{.ProjectNameCamel}}{}
	if err := storage.OpenFile(config.StorageFileDir, &{{.ProjectNameAbbr}}s); err != nil {
		return err
	}
	for i, {{.ProjectNameAbbr}}Obj := range {{.ProjectNameAbbr}}s {
		if {{.FileKeys}} {
			{{.ProjectNameAbbr}}s = append({{.ProjectNameAbbr}}s[:i], {{.ProjectNameAbbr}}s[i+1:]...)
			break
		}
	}
	return storage.SaveFile(config.StorageFileDir, {{.ProjectNameAbbr}}s) 
}

package loginrole

import (
	ae "{{.ProjectPath}}/internal/api_error"
	a "{{.ProjectPath}}/internal/audit"
	"{{.ProjectPath}}/internal/util"
)

//go:generate mockgen -source=manager.go -destination=mock.go -package=loginrole
type (
	DataLoginRoleAdapter interface {
		Read(*LoginRole) error
		ReadAll(*[]LoginRole, LoginRoleParam) (int, error)
		Create(*LoginRole) error
		Update(LoginRole) error
		Delete(*LoginRole) error
	}

	ManagerLoginRole struct {
		dataLoginRole DataLoginRoleAdapter
		auditWriter   a.AuditAdapter
	}
)

func NewManagerLoginRole(clo DataLoginRoleAdapter) *ManagerLoginRole {
	aw := a.AuditInit()
	return &ManagerLoginRole{dataLoginRole: clo, auditWriter: aw}
}

func (m *ManagerLoginRole) Get(lo *LoginRole) error {
	if lo.LoginId == "" {
		return ae.MissingParamError("LoginId")
	}
	if lo.RoleId == "" {
		return ae.MissingParamError("RoleId")
	}
	return m.dataLoginRole.Read(lo)
}

func (m *ManagerLoginRole) Search(lo *[]LoginRole, param LoginRoleParam) (int, error) {
	param.Param.CalculateParam("login_id", map[string]string{"login_id": "login_id"})

	return m.dataLoginRole.ReadAll(lo, param)
}

func (m *ManagerLoginRole) Post(lo *LoginRole) error {

	if err := m.dataLoginRole.Create(lo); err != nil {
		return err
	}
	go a.AuditCreate(m.auditWriter, *lo, LoginRoleConst, a.KeysToString("login_id", lo.LoginId, "role_id", lo.RoleId))
	return nil
}

func (m *ManagerLoginRole) Patch(loIn LoginRolePatch) error {
	// get old list
	loginRoleParam := LoginRoleParam{Param: util.Param{Search: util.Search{Filters: []util.Filter{ {Column: "login_id", Compare: "=", Value: loIn.LoginId}}}}}
	existingLoginRoles := []LoginRole{}
	_, errSearch := m.dataLoginRole.ReadAll(&existingLoginRoles, loginRoleParam)
	if errSearch != nil {
		return errSearch
	}
	exisingRoles := []string{}
	for _, e := range existingLoginRoles {
		exisingRoles = append(exisingRoles, e.RoleId)
	}
	// compare new to old
	addRoles := util.ArrayDiff(exisingRoles, loIn.RoleIds)
	for _, add := range addRoles {
		if err := m.dataLoginRole.Create(&LoginRole{LoginId: loIn.LoginId, RoleId: add}); err != nil {
			return err
		}
	}
	deleteRoles := util.ArrayDiff(loIn.RoleIds, exisingRoles)
	for _, del := range deleteRoles {
		if err := m.dataLoginRole.Delete(&LoginRole{LoginId: loIn.LoginId, RoleId: del}); err != nil {
			return err
		}
	}
	return nil
}

func (m *ManagerLoginRole) Delete(lo *LoginRole) error {
	if lo.LoginId == "" {
		return ae.MissingParamError("LoginId")
	}
	if lo.RoleId == "" {
		return ae.MissingParamError("RoleId")
	}
	if err := m.dataLoginRole.Delete(lo); err != nil {
		return err
	}
	go a.AuditDelete(m.auditWriter, *lo, LoginRoleConst, a.KeysToString("login_id", lo.LoginId, "role_id", lo.RoleId))
	return nil
}

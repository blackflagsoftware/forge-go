package loginrole

import (
	"fmt"
	"testing"

	"github.com/golang/mock/gomock"
	"github.com/stretchr/testify/assert"
)

func TestManagerLoginRole_Get(t *testing.T) {
	ctrl := gomock.NewController(t)
	mockDataLoginRole := NewMockDataLoginRoleAdapter(ctrl)

	tests := []struct {
		name    string
		lo      *LoginRole
		wantErr bool
		calls   []*gomock.Call
	}{
		{
			"successful",
			&LoginRole{LoginId: "test id", RoleId: "test id"},
			false,
			[]*gomock.Call{
				mockDataLoginRole.EXPECT().Read(gomock.Any()).Return(nil),
			},
		},
		{
			"invalid id",
			&LoginRole{LoginId: "", RoleId: ""},
			true,
			[]*gomock.Call{},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &ManagerLoginRole{dataLoginRole: mockDataLoginRole}
			err := m.Get(tt.lo)
			if !tt.wantErr {
				assert.Nil(t, err, "ManagerLoginRole.Get().%s => expected not error; got: %s", tt.name, err)
			}
			if tt.wantErr {
				assert.NotNil(t, err, "ManagerLoginRole.Get().%s => expected error: got nil", tt.name)
			}
		})
	}
}

func TestManagerLoginRole_Post(t *testing.T) {
	ctrl := gomock.NewController(t)
	mockDataLoginRole := NewMockDataLoginRoleAdapter(ctrl)

	tests := []struct {
		name    string
		lo      *LoginRole
		wantErr bool
		calls   []*gomock.Call
	}{
		{
			"successful",
			&LoginRole{LoginId: "a", RoleId: "a"},
			false,
			[]*gomock.Call{mockDataLoginRole.EXPECT().Create(gomock.Any()).Return(nil).AnyTimes()},
		},
		{
			"failed - loginId",
			&LoginRole{LoginId: "a", RoleId: "a"},
			true,
			[]*gomock.Call{},
		},
		{
			"failed - roleId",
			&LoginRole{LoginId: "a", RoleId: "a"},
			true,
			[]*gomock.Call{},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &ManagerLoginRole{dataLoginRole: mockDataLoginRole}
			err := m.Post(tt.lo)
			if !tt.wantErr {
				assert.Nil(t, err, "ManagerLoginRole.Create().%s => expected not error; got: %s", tt.name, err)
			}
			if tt.wantErr {
				assert.NotNil(t, err, "ManagerLoginRole.Create().%s => expected error: got nil", tt.name)
			}
		})
	}
}

func TestManagerLoginRole_Patch(t *testing.T) {
	ctrl := gomock.NewController(t)
	mockDataLoginRole := NewMockDataLoginRoleAdapter(ctrl)

	tests := []struct {
		name    string
		body    LoginRolePatch
		wantErr bool
		calls   []*gomock.Call
	}{
		{
			"successful",
			LoginRolePatch{LoginId: "test value", RoleIds: []string{"test value"}},
			false,
			[]*gomock.Call{
				mockDataLoginRole.EXPECT().Read(gomock.Any()).Return(nil),
				mockDataLoginRole.EXPECT().Update(gomock.Any()).Return(nil),
			},
		},
		{
			"invalid id",
			LoginRolePatch{LoginId: "test value", RoleIds: []string{"test value"}},
			true,
			[]*gomock.Call{
				mockDataLoginRole.EXPECT().Read(gomock.Any()).Return(fmt.Errorf("missing record")),
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &ManagerLoginRole{dataLoginRole: mockDataLoginRole}
			err := m.Patch(tt.body)
			if !tt.wantErr {
				assert.Nil(t, err, "ManagerLoginRole.Update().%s => expected not error; got: %s", tt.name, err)
			}
			if tt.wantErr {
				assert.NotNil(t, err, "ManagerLoginRole.Update().%s => expected error: got nil", tt.name)
			}
		})
	}
}

func TestManagerLoginRole_Delete(t *testing.T) {
	ctrl := gomock.NewController(t)
	mockDataLoginRole := NewMockDataLoginRoleAdapter(ctrl)

	tests := []struct {
		name    string
		lo      *LoginRole
		wantErr bool
		calls   []*gomock.Call
	}{
		{
			"successful",
			&LoginRole{LoginId: "test id", RoleId: "test id"},
			false,
			[]*gomock.Call{
				mockDataLoginRole.EXPECT().Delete(gomock.Any()).Return(nil),
			},
		},
		{
			"invalid id",
			&LoginRole{LoginId: "", RoleId: ""},
			true,
			[]*gomock.Call{},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &ManagerLoginRole{dataLoginRole: mockDataLoginRole}
			err := m.Delete(tt.lo)
			if !tt.wantErr {
				assert.Nil(t, err, "ManagerLoginRole.Delete().%s => expected not error; got: %s", tt.name, err)
			}
			if tt.wantErr {
				assert.NotNil(t, err, "ManagerLoginRole.Delete().%s => expected error: got nil", tt.name)
			}
		})
	}
}

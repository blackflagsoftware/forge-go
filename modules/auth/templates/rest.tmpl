package auth

import (
	"context"
	"fmt"
	"net/http"

	ae "{{.ProjectPath}}/internal/api_error"
	"{{.ProjectPath}}/internal/util"
	aa "{{.ProjectPath}}/internal/v1/authauthorize"
	ac "{{.ProjectPath}}/internal/v1/authclient"
	"github.com/labstack/echo/v4"
	"gopkg.in/guregu/null.v3"
)

type (
	ManagerAuthAdapter interface {
		GetClientId(context.Context, string) (string, error)
		OAuthSignIn(context.Context, OAuthLogin, aa.AuthAuthorize) (OAuthResponse, error)
		OAuthExchange(context.Context, OAuthToken) (OAuthToken, error)
	}

	RestAuth struct{
		managerAuth ManagerAuthAdapter
	}
)

func InitializeRest(eg *echo.Group) {
	ml := NewManagerAuth()
	hl := NewRestAuth(ml)
	hl.LoadAuthRoutes(eg)
}

func NewRestAuth(ma ManagerAuthAdapter) *RestAuth {
	return &RestAuth{managerAuth: ma}
}

func (h *RestAuth) LoadAuthRoutes(eg *echo.Group) {
	eg.GET("/auth/oauth2/authorize", h.OAuth2Authorize)
	eg.POST("/auth/oauth2/verify-consent", h.OAuth2VerifyConsent)
	eg.POST("/auth/oauth2/sign-in", h.OAuth2SignIn)
	eg.POST("/auth/oauth2/token-exchange", h.OAuth2Exchange)
	eg.POST("/auth/oauth2/verify-consent", h.OAuth2VerifyConsent)
}

func (h *RestAuth) Redirect(c echo.Context) error {
	return c.Redirect(http.StatusSeeOther, "https://localhost:3001/redirect")
}

func (h *RestAuth) OAuth2Authorize(c echo.Context) error {
	// return the login/consent form code
	// do a redirect and call our "consent" page, store this on that page and send when calling "sign-in"
	ctx := context.TODO()
	auth := OAuthLogin{}
	if err := c.Bind(&auth); err != nil {
		bindErr := ae.BindError(err)
		return c.JSON(bindErr.StatusCode, util.NewOutput(c, bindErr.BodyError(), &bindErr, nil))
	}
	if auth.ResponseType != "code" {
		responseErr := ae.GeneralError("Invalid response_type, 'code' is the only valid option", nil)
		return c.JSON(responseErr.StatusCode, util.NewOutput(c, nil, &responseErr, nil))
	}
	redirectPath := url.URL{}
	redirectPath.Scheme = "https"
	clientName, err := h.managerAuth.GetClientId(ctx, auth.ClientId)
	if err != nil {
		responseErr := ae.GeneralError("Not a valid client", err)
		return c.JSON(responseErr.StatusCode, util.NewOutput(c, nil, &responseErr, nil))
	}
	query := c.Request().URL.Query()
	query.Add("client_id", auth.ClientId)
	query.Add("client_name", clientName)
	query.Add("scope", auth.Scope)
	query.Add("state", auth.State)
	query.Add("redirect_uri", auth.RedirectUri)
	query.Add("code_challenge", auth.CodeChallenge)
	query.Add("code_challenge_method", auth.CodeChallengeMethod)

	redirectPath.Opaque = "//localhost/consent"
	redirectPath.RawQuery = query.Encode()
	// payload := map[string]string{"consent_form_path": redirectPath.String()}

	return c.Redirect(http.StatusSeeOther, redirectPath.String())
	// return c.JSON(http.StatusOK, util.NewOutput(c, payload, nil, nil))
}

func (h *RestAuth) OAuth2SignIn(c echo.Context) error {
	// this is called from the login form or consent form
	// the consent form will validate the response here and redirect if needed
	ctx := context.TODO()
	logData := OAuthLoginData{}
	if err := c.Bind(&logData); err != nil {
		// since this is coming from our consent form, rare but avoidable
		bindErr := ae.BindError(err)
		return c.JSON(bindErr.StatusCode, util.NewOutput(c, bindErr.BodyError(), &bindErr, nil))
	}
	login := logData.Data
	authorizeId := util.GenerateRandomString(32) // or authorization_code
	consentId := util.GenerateRandomString(32)
	authAuthorize := aa.AuthAuthorize{
		Id:                   authorizeId,
		ClientId:             null.StringFrom(login.ClientId),
		Verifier:             null.StringFrom(login.CodeChallenge),
		VerifierEncodeMethod: null.StringFrom(login.CodeChallengeMethod),
		State:                null.StringFrom(login.State),
		Scope:                null.StringFrom(login.Scope),
		ConsentId:            null.StringFrom(consentId),
		RedirectUrl:          null.StringFrom(login.RedirectUri),
		AuthorizedAt:         null.TimeFrom(time.Now().UTC()),
	}

	response, err := h.managerAuth.OAuthSignIn(ctx, logData.Data, authAuthorize)
	if err != nil {
		apiError := err.(ae.ApiError)
		be := apiError.BodyError()
		return c.JSON(be.StatusCode, util.NewOutput(c, nil, &apiError, nil))
	}
	payload := map[string]string{"code": response.AuthCode, "access_token": response.AccessToken}
	return c.JSON(http.StatusOK, util.NewOutput(c, payload, nil, nil))
}

func (h *RestAuth) OAuth2Exchange(c echo.Context) error {
	// grant_type=authorization_code
	ctx := context.TODO()
	oAuthToken := OAuthToken{}
	if err := c.Bind(&oAuthToken); err != nil {
		bindErr := ae.BindError(err)
		return c.JSON(bindErr.StatusCode, util.NewOutput(c, bindErr.BodyError(), &bindErr, nil))
	}

	authToken, err := h.managerAuth.OAuthExchange(ctx, oAuthToken)
	if err != nil {
		apiError := err.(ae.ApiError)
		be := apiError.BodyError()
		return c.JSON(be.StatusCode, util.NewOutput(c, nil, &apiError, nil))
	}

	return c.JSON(http.StatusOK, util.NewOutput(c, authToken, nil, nil))
}

func (h *RestAuth) OAuth2VerifyConsent(c echo.Context) error {
	// grant_type=authorization_code
	ctx := context.TODO()
	oAuthToken := OAuthToken{}
	if err := c.Bind(&oAuthToken); err != nil {
		bindErr := ae.BindError(err)
		return c.JSON(bindErr.StatusCode, util.NewOutput(c, bindErr.BodyError(), &bindErr, nil))
	}

	authToken, err := h.managerAuth.OAuthExchange(ctx, oAuthToken)
	if err != nil {
		apiError := err.(ae.ApiError)
		be := apiError.BodyError()
		return c.JSON(be.StatusCode, util.NewOutput(c, nil, &apiError, nil))
	}

	return c.JSON(http.StatusOK, util.NewOutput(c, authToken, nil, nil))
}

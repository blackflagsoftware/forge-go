package role

import (
	"context"
	"fmt"

	ae "{{.ProjectPath}}/internal/api_error"
	stor "{{.ProjectPath}}/internal/storage"
	"{{.ProjectPath}}/internal/util"
	"github.com/jmoiron/sqlx"
)

type (
	SQLRole struct {
		DB *sqlx.DB
	}
)

func InitSQL() *SQLRole {
	db := stor.PostgresInit()
	return &SQLRole{DB: db}
}

func (d *SQLRole) Read(ctx context.Context, rol *Role) error {
	sqlGet := `
		SELECT
			id,
			name,
			description
		FROM role WHERE id = $1`
	if errDB := d.DB.Get(rol, sqlGet, rol.Id); errDB != nil {
		return ae.DBError("Role Get: unable to get record.", errDB)
	}
	return nil
}

func (d *SQLRole) ReadAll(ctx context.Context, rol *[]Role, param RoleParam) (int, error) {
	searchStmt, args := util.BuildSearchString(param.Param, false)
	sqlSearch := fmt.Sprintf(`
		SELECT
			id,
			name,
			description
		FROM role
		%s
		ORDER BY %s %s`, searchStmt, param.Sort, param.PaginationString)
	sqlSearch = d.DB.Rebind(sqlSearch)
	if errDB := d.DB.Select(rol, sqlSearch, args...); errDB != nil {
		return 0, ae.DBError("Role Search: unable to select records.", errDB)
	}
	sqlCount := fmt.Sprintf(`
		SELECT
			COUNT(*)
		FROM role
		%s`, searchStmt)
	var count int
	sqlCount = d.DB.Rebind(sqlCount)
	if errDB := d.DB.Get(&count, sqlCount, args...); errDB != nil {
		return 0, ae.DBError("role Search: unable to select count.", errDB)
	}
	return count, nil
}

func (d *SQLRole) Create(ctx context.Context, rol *Role) error {
	sqlPost := `
		INSERT INTO role (
			id,
			name,
			description
		) VALUES (
			:id,
			:name,
			:description
		)`
	_, errDB := d.DB.NamedExec(sqlPost, rol)
	if errDB != nil {
		return ae.DBError("Role Post: unable to insert record.", errDB)
	}

	return nil
}

func (d *SQLRole) Update(ctx context.Context, rol Role) error {
	sqlPatch := `
		UPDATE role SET
			name = :name,
			description = :description
		WHERE id = :id`
	if _, errDB := d.DB.NamedExec(sqlPatch, rol); errDB != nil {
		return ae.DBError("Role Patch: unable to update record.", errDB)
	}
	return nil
}

func (d *SQLRole) Delete(ctx context.Context, rol *Role) (err error) {
	txn := d.DB.MustBegin()
	defer util.TxnFinish(txn, &err)

	sqlDelete := `
		DELETE FROM role WHERE id = $1`
	if _, errDB := txn.Exec(sqlDelete, rol.Id); errDB != nil {
		return ae.DBError("Role Delete: unable to delete record.", errDB)
	}
	sqlDeleteLoginRole := `DELETE FROM login_role WHERE role_id = $1`
	if _, errDB := txn.Exec(sqlDeleteLoginRole, rol.Id); errDB != nil {
		return ae.DBError("Role Delete: unable to delete login roles record.", errDB)
	}

	return nil
}

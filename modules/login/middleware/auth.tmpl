package middleware

import (
	"crypto/ed25519"
	"crypto/rsa"
	"crypto/x509"
	"encoding/base64"
	"encoding/pem"
	"strings"
	"time"

	"github.com/golang-jwt/jwt/v5"
	echojwt "github.com/labstack/echo-jwt/v4"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"{{.ProjectPath}}/config"
	ae "{{.ProjectPath}}/internal/api_error"
)

type (
	CustomClaims struct {
		Roles []string `json:"roles"`
		jwt.RegisteredClaims
	}
)

// add any other insecure routes here, these will not be checked against any auth, see below
var InsecureRoutes = []string{
	"/v1/login/reset/pwd",
	"/v1/login/forgot-password",
	"/v1/login/signin",
	"/v1/login/oauth2/authorize",
	"/v1/login/oauth2/verify-consent",
}

// basic auth
// if you want to use this conjuction with the jwt auth
// daisy chain the the eg.Use() calls with this one first
// e.g.:
// eg.Use(middleware.BasicAuthWithConfig(m.BasicAuthConfig()))
// eg.Use(echojwt.WithConfig(m.AuthConfig()))
func BasicAuthConfig() middleware.BasicAuthConfig {
	return middleware.BasicAuthConfig{
		Skipper: SkipperBasicFunc(),
		Validator: BasicAuthFunc(),
	}
}

func BasicAuthFunc() middleware.BasicAuthValidator {
	return func(userName, userPwd string, c echo.Context) (bool, error) {
		if config.LoginBasicAuthUser == userName && config.LoginBasicAuthPwd == userPwd {
			c.Set("authenticated", "true")
		}
		return true, nil
	}
} 

// jwt auth
func AuthConfig() echojwt.Config {
	keyContent, err := base64.StdEncoding.DecodeString(config.LoginAuthSecret)
	if err != nil {
		Default.Println("Unable to DecodeString for auth secret", err)
		return echojwt.Config{}
	}
	return echojwt.Config{
		Skipper: SkipperJWTFunc(),
		NewClaimsFunc: func(c echo.Context) jwt.Claims {
			return new(CustomClaims)
		},
		SigningKey: keyContent,
	}
}

func AuthContext(compareRole []string, c echo.Context) bool {
	user := c.Get("user").(*jwt.Token)
	claims := user.Claims.(*CustomClaims)
	for _, c := range claims.Roles {
		for _, r := range compareRole {
			if c == r {
				return true
			}
		}
	}
	return false
}

func AuthBuild(roles []string) (string, error) {
	// build claims
	now := time.Now().UTC()
	hours := config.GetExpiresAtDuration()
	expiresAt := now.Add(time.Duration(hours) * time.Hour).UTC()
	claims := &CustomClaims{
		Roles: roles,
		RegisteredClaims: jwt.RegisteredClaims{
			IssuedAt:  jwt.NewNumericDate(now),
			ExpiresAt: jwt.NewNumericDate(expiresAt),
		},
	}
	// determine which alg to use and then create the jwt
	keyContent, err := base64.StdEncoding.DecodeString(config.LoginAuthSecret)
	if err != nil {
		Default.Println("Unable to DecodeString for auth secret", err)
		return "", ae.GeneralError("auth: unable to sign token", nil)
	}
	alg := config.LoginAuthAlg
	var (
		secretByte    interface{}
		signingMethod jwt.SigningMethod
		ok            bool
	)
	switch alg {
	case "HMAC":
		secretByte = keyContent
		signingMethod = jwt.SigningMethodHS256 // doesn't like the 512
	case "ECDSA":
		block, _ := pem.Decode(keyContent)
		if block == nil || !strings.Contains(block.Type, "PRIVATE KEY") {
			Default.Print("Failed to decode PEM block containing private key")
			return "", ae.GeneralError("auth: unable to sign token", nil)
		}
		var err error
		secretByte, err = x509.ParseECPrivateKey(block.Bytes)
		if err != nil {
			Default.Println("Unable to parse private key:", err)
			return "", ae.GeneralError("auth: unable to sign token", nil)
		}
		signingMethod = jwt.SigningMethodES512
	case "RSA", "EdDSA":
		block, _ := pem.Decode(keyContent)
		if block == nil || !strings.Contains(block.Type, "PRIVATE KEY") {
			Default.Print("Failed to decode PEM block containing private key")
			return "", ae.GeneralError("auth: unable to sign token", nil)
		}
		parsedKey, err := x509.ParsePKCS8PrivateKey(block.Bytes)
		if err != nil {
			Default.Println("Unable to parse private key:", err)
			return "", ae.GeneralError("auth: unable to sign token", nil)
		}
		if alg == "RSA" {
			signingMethod = jwt.SigningMethodRS512
			secretByte, ok = parsedKey.(*rsa.PrivateKey)
			if !ok {
				Default.Println("Not a RSA key")
				return "", ae.GeneralError("auth: unable to sign token", nil)
			}
		}
		if alg == "EdDSA" {
			signingMethod = jwt.SigningMethodEdDSA
			secretByte, ok = parsedKey.(ed25519.PrivateKey)
			if !ok {
				Default.Print("Not an ecdsa key")
				return "", ae.GeneralError("auth: unable to sign token", nil)
			}
		}
	}

	Default.Printf("type: %v; key: %s", signingMethod.Alg(), secretByte)
	token := jwt.NewWithClaims(signingMethod, claims)
	tokenStr, err := token.SignedString(secretByte)
	if err != nil {
		Default.Println("AuthBuild: error getting signed token:", err)
		return "", ae.GeneralError("auth: unable to sign token", nil)
	}
	return tokenStr, nil
}

func SkipperBasicFunc() func(echo.Context) bool {
	return func(c echo.Context) bool {
		bearer := "Bearer"
		auth := c.Request().Header.Get(echo.HeaderAuthorization)
		l := len(bearer)
		if len(auth) > l+1 && strings.EqualFold(auth[:l], bearer) {
			return true
		}
		for _, url := range InsecureRoutes {
			// this will check with contains, so if your path is complex
			// you may need to change the way this works
			if strings.Contains(c.Request().URL.String(), url) {
				return true
			}
		}
		return false
	}
}

func SkipperJWTFunc() func(echo.Context) bool {
	return func(c echo.Context) bool {
		if c.Get("authenticated") == "true" {
			return true
		}
		for _, url := range InsecureRoutes {
			// this will check with contains, so if your path is complex
			// you may need to change the way this works
			if strings.Contains(c.Request().URL.String(), url) {
				return true
			}
		}
		return false
	}
}
package login

import (
	"time"

	"{{.ProjectPath}}/config"
	"{{.ProjectPath}}/internal/util"
	"gopkg.in/guregu/null.v3"
)

type (
	Login struct {
		Id        string      `db:"id" json:"id"`
		EmailAddr  null.String `db:"email_addr" json:"email_address"`
		Pwd        null.String `db:"pwd" json:"password"`
		ConfirmPwd null.String `json:"confirm_password,omitempty"`
		Active     null.Bool   `db:"active" json:"active"`
		SetPwd     null.Bool   `db:"set_pwd" json:"set_password"`
		CreatedAt  null.Time   `db:"created_at" json:"created_at"`
		UpdatedAt  null.Time   `db:"updated_at" json:"updated_at"`
	}

	LoginData struct {
		Data Login `json:"data"`
	}

	LoginParam struct {
		// TODO: add any other custom params here
		util.Param
	}

	OAuthLogin struct {
		EmailAddr null.String `db:"email_addr" json:"email_address"`
		Pwd       null.String `db:"pwd" json:"password"`
		AuthId    null.String `json:"auth_id"`
	}

	OAuthResponse struct {
		State    string `json:"state"`
		AuthCode string `json:"code"`
	}

	OAuthToken struct {
		TokenType    string `json:"token_type"`
		AccessToken  string `json:"access_token"`
		ExpiresIn    int    `json:"expires_in"` // in seconds
		Scope        string `json:"scope"`      // comma delimeted list
		RefreshToken string `json:"refresh_token"`
		GrantType    string `json:"grant_type,omitempty"` // authorization_code || refresh_token
		CodeVerifier string `json:"code_verifier,omitempty"`
		ClientId     string `json:"client_id,omitempty"`
		ClientSecret string `json:"client_secret,omitempty"`
		Code         string `json:"code,omitempty"`
		RedirectUrl  string `json:"redirect_url,omitempty"`
	}

	ResetRequest struct {
		EmailAddr  string    `db:"email_addr" json:"email_addr"`
		LoginId   string    `db:"login_id"`
		ResetToken string    `db:"reset_token"`
		CreatedAt  time.Time `db:"created_at"`
	}

	ResetRequestData struct {
		Data ResetRequest `json:"data"`
	}

	PasswordReset struct {
		EmailAddr  string      `json:"email_address"`
		ResetToken string      `json:"reset_token"`
		Pwd        null.String `json:"password"`
		ConfirmPwd null.String `json:"confirm_password"`
	}

	PasswordResetData struct {
		Data PasswordReset `json:"data"`
	}

	LoginRoles struct {
		LoginId  string   `db:"id" json:"id"`
		EmailAddr string   `db:"email_addr" json:"email_address"`
		Roles     []string `db:"roles" json:"roles"`
	}
)

const LoginConst = "login"

func InitStorage() DataLoginAdapter {
	if config.StorageSQL {
		return InitSQL()
	}
	return nil
}

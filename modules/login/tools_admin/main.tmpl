package main

import (
	"context"
	"fmt"
	"os"

	"{{.ProjectPath}}/config"
	l "{{.ProjectPath}}/internal/v1/login"
	lr "{{.ProjectPath}}/internal/v1/loginrole"
	r "{{.ProjectPath}}/internal/v1/role"
	"{{.ProjectPath}}/internal/util"
	"gopkg.in/guregu/null.v3"
)

// this will populate the admin user
// and populate the reset pwd process

func main() {
	ctx := context.TODO()
	login := &l.Login{EmailAddr: null.StringFrom(config.LoginAdminEmail), SetPwd: null.BoolFrom(true)}
	dh := l.InitStorage()
	mh := l.NewManagerLogin(dh)
	if err := mh.Post(ctx, login); err != nil {
		fmt.Println("Creating admin error:", err)
		os.Exit(1)
	}
	dr := r.InitStorage()
	mr := r.NewManagerRole(dr)
	roles := []r.Role{}
	param := r.RoleParam{Param: util.Param{Search: util.Search{Filters: []util.Filter{{Column: "name", Compare: "=", Value: "admin"}}}}}
	if _, errDB := mr.Search(ctx, &roles, param); errDB != nil {
		fmt.Println("Creating admin unable to get admin role id:", errDB)
		os.Exit(1)
	}
	if len(roles) == 0 {
		fmt.Println("Creating admin unable to get admin role id, search failed")
		os.Exit(1)
	}
	adminId := roles[0].Id
	// insert login_role
	dlr := lr.InitStorage()
	mlr := lr.NewManagerLoginRole(dlr)
	loginRole := &lr.LoginRole{LoginId: login.Id, RoleId: adminId}
	if err := mlr.Post(ctx, loginRole); err != nil {
		fmt.Println("Create admin unable to set login role:", err)
		os.Exit(1)
	}
	os.Exit(0)
}
